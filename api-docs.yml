openapi: 3.0.0
info:
  title: Management Backend
  description: API docs
  version: 1.0.0

servers:
  - url: "http://localhost:9082/api/"
  - url: "http://167.172.220.75:9082/api/"

security:
    - authorization: []

tags:
  - name: User
    description: Endpoints to create and get user related data
  - name: Login
    description: Endpoints to login into system

paths:
  /user:
    post:
      tags:
        - User
      summary: Create a data for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          description: OK

    get:
      tags:
        - User
      summary: get all data for user
      responses:
        200:
          description: OK

  /user/{:id}:
    get:
      tags:
        - User
      summary: get by id data for user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - User
      summary: update data for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userUpdate"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - User
      summary: delete user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /login:
    post:
      tags:
        - Login
      summary: Login into system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        200:
          description: Ok

  /guestUser:
    post:
      tags:
        - Guest User
      summary: Create a data for guest user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestUser"
      responses:
        200:
          description: OK

    get:
      tags:
        - Guest User
      summary: get all data for guest user
      responses:
        200:
          description: OK

  /guestUser/{:id}:
    get:
      tags:
        - Guest User
      summary: get by id data for guest user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Guest User
      summary: update data for guest user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestUserUpdate"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Guest User
      summary: delete guest user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /guestLogin:
    post:
      tags:
        - Guest User Login
      summary: Guest Login into system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestLogin"
      responses:
        200:
          description: Ok

  /user/forgot/password:
    post:
      tags:
        - User
      summary: generate forgot password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forgotPassword"
      responses:
        200:
          description: OK

  /user/reset/password:
    post:
      tags:
        - User
      summary: reset password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPassword"
      responses:
        200:
          description: OK

  /user/otp/verify:
    post:
      tags:
        - User
      summary: otp verify for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/otpVerify"
      responses:
        200:
          description: OK

  /guestUser/forgot/password:
    post:
      tags:
        - Guest User
      summary: generate forgot password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forgotPassword"
      responses:
        200:
          description: OK

  /guestUser/reset/password:
    post:
      tags:
        - Guest User
      summary: reset password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPassword"
      responses:
        200:
          description: OK

  /guestUser/otp/verify:
    post:
      tags:
        - Guest User
      summary: otp verify for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/otpVerify"
      responses:
        200:
          description: OK

  /state:
    post:
      tags:
        - State
      summary: Create a data for state
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/state"
      responses:
        200:
          description: OK

    get:
      tags:
        - State
      summary: get all data for state
      responses:
        200:
          description: OK

  /state/{:id}:
    get:
      tags:
        - State
      summary: get by id data for state
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - State
      summary: update data for state
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/state"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - State
      summary: delete state
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /city:
    post:
      tags:
        - City
      summary: Create a data for city
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/city"
      responses:
        200:
          description: OK

    get:
      tags:
        - City
      summary: get all data for city
      responses:
        200:
          description: OK

  /city/{:id}:
    get:
      tags:
        - City
      summary: get by id data for city
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - City
      summary: update data for city
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/city"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - City
      summary: delete city
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /vendorProfile:
    post:
      tags:
        - Vendor Profile
      summary: Create a data for vendorProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vendorProfile"
      responses:
        200:
          description: OK

    get:
      tags:
        - Vendor Profile
      summary: get all data for vendorProfile
      responses:
        200:
          description: OK

  /vendorProfile/{:id}:
    get:
      tags:
        - Vendor Profile
      summary: get by id data for vendorProfile
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Vendor Profile
      summary: update data for vendorProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vendorProfile"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Vendor Profile
      summary: delete vendorProfile
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /vendorProfile/guest/{:guestId}:
    get:
      tags:
        - Vendor Profile
      summary: get by id data for guestId vendorProfile
      parameters:
        - in: path
          name: :guestId
          required: true
      responses:
        200:
          description: OK

  /category:
    post:
      tags:
        - Category
      summary: Create a data for category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/category"
      responses:
        200:
          description: OK

    get:
      tags:
        - Category
      summary: get all data for category
      responses:
        200:
          description: OK

  /category/{:id}:
    get:
      tags:
        - Category
      summary: get by id data for category
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Category
      summary: update data for category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/category"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Category
      summary: delete category
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /tags:
    post:
      tags:
        - Tags
      summary: Create a data for tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      responses:
        200:
          description: OK

    get:
      tags:
        - Tags
      summary: get all data for tags
      responses:
        200:
          description: OK

  /tags/{:id}:
    get:
      tags:
        - Tags
      summary: get by id data for tags
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Tags
      summary: update data for tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Tags
      summary: delete tags
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /partner:
    post:
      tags:
        - Partner
      summary: Create a data for partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partner"
      responses:
        200:
          description: OK

    get:
      tags:
        - Partner
      summary: get all data for partner
      responses:
        200:
          description: OK

  /partner/{:id}:
    get:
      tags:
        - Partner
      summary: get by id data for partner
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Partner
      summary: update data for partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partner"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Partner
      summary: delete partner
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /artist:
    post:
      tags:
        - Artist
      summary: Create a data for artist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/artist"
      responses:
        200:
          description: OK

    get:
      tags:
        - Artist
      summary: get all data for artist
      responses:
        200:
          description: OK

  /artist/{:id}:
    get:
      tags:
        - Artist
      summary: get by id data for artist
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Artist
      summary: update data for artist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/artist"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Artist
      summary: delete artist
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /tickets:
    post:
      tags:
        - Ticket
      summary: Create a data for ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tickets"
      responses:
        200:
          description: OK

    get:
      tags:
        - Ticket
      summary: get all data for ticket
      responses:
        200:
          description: OK

  /tickets/{:id}:
    get:
      tags:
        - Ticket
      summary: get by id data for ticket
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Ticket
      summary: update data for ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tickets"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Ticket
      summary: delete ticket
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /eventListing:
    post:
      tags:
        - Event Listing
      summary: Create a data for eventListing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventListing"
      responses:
        200:
          description: OK

    get:
      tags:
        - Event Listing
      summary: get all data for eventListing
      parameters:
        - in: query
          name: language
          schema:
            type: array
          description: filter according to language
        - in: query
          name: sorting
          schema:
            type: array
          description: filter according to sorting
        - in: query
          name: category
          schema:
            type: array
          description: filter according to category
        - in: query
          name: city
          schema:
            type: array
          description: filter according to city
        - in: query
          name: type
          schema:
            type: array
          description: filter according to type
        - in: query
          name: name
          schema:
            type: string
          description: filter according to name
        - in: query
          name: minPrice
          schema:
            type: number
          description: filter according to minPrice
        - in: query
          name: maxPrice
          schema:
            type: number
          description: filter according to maxPrice
        - in: query
          name: date
          schema:
            type: string
          description: filter according to date
      responses:
        200:
          description: OK

  /eventListing/{:id}:
    get:
      tags:
        - Event Listing
      summary: get by id data for eventListing
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Event Listing
      summary: update data for eventListing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventListing"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  delete:
      tags:
        - Event Listing
      summary: delete eventListing
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK


  /eventListing/event/{:id}:
    get:
      tags:
        - Event Listing
      summary: get by event id data for eventListing
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /eventListing/details/{:id}:
    put:
      tags:
        - Event Listing
      summary: update details ( artist/ partner) for eventListing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventListingDetails"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /eventListing/guest/{:userId}:
    get:
      tags:
        - Event Listing
      summary: get by id data for eventListing
      parameters:
        - in: path
          name: :userId
          required: true
      responses:
        200:
          description: OK

  /promoter:
    post:
      tags:
        - Promoter
      summary: Create a data for promoter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promoter"
      responses:
        200:
          description: OK

    get:
      tags:
        - Promoter
      summary: get all data for promoter
      responses:
        200:
          description: OK

  /promoter/{:id}:
    get:
      tags:
        - Promoter
      summary: get by id data for promoter
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Promoter
      summary: update data for promoter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promoter"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Promoter
      summary: delete promoter
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /promoter/email/{:email}:
    get:
      tags:
        - Promoter
      summary: get by email data for promoter
      parameters:
        - in: path
          name: :email
          required: true
      responses:
        200:
          description: OK

  /promoter/category/event/{:id}:
    post:
      tags:
        - Promoter
      summary: Create a category for promoter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotersCategory"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /promoter/category/event/{:id}/{:idx}:
    post:
      tags:
        - Promoter
      summary: Update a category for promoter using index
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotersCategory"
      parameters:
        - in: path
          name: :id
          required: true
        - in: path
          name: :idx
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Promoter
      summary: delete a category for promoter using index
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotersCategory"
      parameters:
        - in: path
          name: :id
          required: true
        - in: path
          name: :idx
          required: true
      responses:
        200:
          description: OK

  /purchaseTicket:
    post:
      tags:
        - Purchase Ticket
      summary: Create a data for purchaseTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseTicket"
      responses:
        200:
          description: OK

    get:
      tags:
        - Purchase Ticket
      summary: get all data for purchaseTicket
      responses:
        200:
          description: OK

  /purchaseTicket/{:id}:
    get:
      tags:
        - Purchase Ticket
      summary: get by id data for purchaseTicket
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Purchase Ticket
      summary: update a data for purchaseTicket
      parameters:
        - in: path
          name: :id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseTicketUpdate"
      responses:
        200:
          description: OK

  /purchaseTicket/offline/{:orderId}:
    post:
      tags:
        - Purchase Ticket
      summary: get by orderId data for purchaseTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseTicketUpdate"
      parameters:
        - in: path
          name: :orderId
          required: true
      responses:
        200:
          description: OK

  /purchaseTicket/{:eventId}/{:email}:
    get:
      tags:
        - Purchase Ticket
      summary: get by event id data for purchaseTicket
      parameters:
        - in: path
          name: :eventId
          required: true
        - in: path
          name: :email
          required: true
      responses:
        200:
          description: OK

  /language:
    post:
      tags:
        - Language
      summary: Create a data for language
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/language"
      responses:
        200:
          description: OK

    get:
      tags:
        - Language
      summary: get all data for language
      responses:
        200:
          description: OK

  /language/{:id}:
    get:
      tags:
        - Language
      summary: get by id data for language
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Language
      summary: update data for language
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/language"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Language
      summary: delete language
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /sorting:
    post:
      tags:
        - Sorting
      summary: Create a data for sorting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sorting"
      responses:
        200:
          description: OK

    get:
      tags:
        - Sorting
      summary: get all data for sorting
      responses:
        200:
          description: OK

  /sorting/{:id}:
    get:
      tags:
        - Sorting
      summary: get by id data for sorting
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Sorting
      summary: update data for sorting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sorting"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Sorting
      summary: delete sorting
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /utiles:
    post:
      tags:
        - Utils
      summary: Create a data for utils
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/utils"
      responses:
        200:
          description: OK

    get:
      tags:
        - Utils
      summary: get all data for utils
      responses:
        200:
          description: OK

  /dashboard:
    get:
      tags:
        - Dashboard
      summary: get all data for dashboard
      responses:
        200:
          description: OK

  /subscribe:
    post:
      tags:
        - Subscribe
      summary: Create a data for subscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subscribe"
      responses:
        200:
          description: OK

    get:
      tags:
        - Subscribe
      summary: get all data for subscribe
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: filter according to email
      responses:
        200:
          description: OK

  /unsubscribe:
    post:
      tags:
        - Subscribe
      summary: Create a data for unsubscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subscribe"
      responses:
        200:
          description: OK

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: jwt
  schemas:
    user:
      type: object
      required:
        - firstName
        - email
        - password
        - address
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        address:
          type: string
        mobile:
          type: string
        role:
          type: string
        permissions:
          type: array
          items:
            type: string

    userUpdate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - address
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        address:
          type: string
        mobile:
          type: string
        email:
          type: string
        permissions:
          type: array
          items:
            type: string

    login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    guestUser:
      type: object
      required:
        - email
        - type
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        mobile:
          type: string
        type:
          type: string
        permissions:
          type: array
          items:
            type: string

    guestUserUpdate:
      type: object
      required:
        - email
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        mobile:
          type: string
        image:
          type: string
        gender:
          type: string
        permissions:
          type: array
          items:
            type: string

    guestLogin:
      type: object
      required:
        - email
        - password
        - type
      properties:
        email:
          type: string
        password:
          type: string
        type:
          type: string

    forgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string

    resetPassword:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    otpVerify:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
        otp:
          type: string

    state:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    city:
      type: object
      required:
        - name
        - image
      properties:
        name:
          type: string
        image:
          type: string

    vendorProfile:
        type: object
        required:
          - userId
        properties:
          userId:
            type: string
          isGST:
            type: boolean
          GSTIN:
            type: string
          PAN:
            type: string
          organizationName:
            type: string
          organizationAddress:
            type: string
          state:
            type: string
          contact:
            type: string
          email:
            type: string
          accountType:
            type: string
          beneficiaryName:
            type: string
          accountName:
            type: string
          IFSC:
            type: string
          panImage:
            type: string
          cancelledChequeImage:
            type: string
          agreementSigning:
            type: string

    category:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    tags:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    partner:
      type: object
      required:
        - partner_name
        - partner_img
        - partner_bio
      properties:
        partner_name:
          type: string
        partner_img:
          type: string
        partner_bio:
          type: string

    artist:
      type: object
      required:
        - artist_name
        - artist_img
        - artist_bio
        - fb_url
        - insta_url
        - twitter_url
        - linkedin_url
      properties:
        artist_name:
          type: string
        artist_img:
          type: string
        artist_bio:
          type: string
        fb_url:
          type: string
        insta_url:
          type: string
        twitter_url:
          type: string
        linkedin_url:
          type: string

    tickets:
      type: object
      required:
        - eventId
        - guestId
        - ticket_type
        - ticket_name
        - start_date
        - end_date
        - start_time
        - end_time
        - price
        - gst_type
        - gst_included
        - customer_price
        - ticket_quantity
        - primary_add_info
        - secondary_add_info
        - enable_ticket
        - phase_slab_type
        - next_ticket_slab
      properties:
          eventId:
            type: string
          guestId:
            type: string
          ticket_type:
            type: string
          ticket_name:
            type: string
          start_date:
            type: string
          end_date:
            type: string
          start_time:
            type: string
          end_time:
            type: string
          price:
            type: number
          gst_type:
            type: string
          gst_included:
            type: boolean
          customer_price:
            type: string
          ticket_quantity:
            type: string
          primary_add_info:
            type: string
          secondary_add_info:
            type: string
          enable_ticket:
            type: boolean
          phase_slab_type:
            type: boolean
          next_ticket_slab:
            type: boolean

    eventListing:
      type: object
      required:
        - guestid
        - status
        - event_type
        - event_title
        - category
        - tags
        - event_cover_img
        - event_day_type
        - start_date
        - end_date
        - start_time
        - end_time
        - description
        - term_conditions
        - city
        - venue_type
        - select_venue
        - other_venue
        - select_venue_img
        - select_venue_name
        - venue_address
        - artist
        - partner
        - language
        - sorting
      properties:
        guestid:
          type: string
        status:
          type: string
        event_type:
          type: string
        event_title:
          type: string
        category:
          type: string
        tags:
          type: array
        event_cover_img:
          type: string
        event_day_type:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        start_time:
          type: string
        end_time:
          type: string
        description:
          type: string
        term_conditions:
          type: string
        city:
          type: string
        venue_type:
          type: string
        select_venue:
          type: string
        other_venue:
          type: string
        select_venue_img:
          type: string
        select_venue_name:
          type: string
        venue_address:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        artist:
          type: array
        partner:
          type: array
        language:
          type: string
        sorting:
          type: string
        amount:
          type: string

    eventListingDetails:
      type: object
      required:
        - idx
        - key
      properties:
        idx:
          type: number
        key:
          type: string
        data:
          type: object

    promoter:
      type: object
      required:
        - name
        - eventId
        - email
        - mobile_number
        - enable_offline_punching
        - enable_bulk_offline_punching
      properties:
        name:
          type: string
        eventId:
          type: string
        email:
          type: string
        mobile_number:
          type: string
        enable_offline_punching:
          type: boolean
        enable_bulk_offline_punching:
          type: boolean

    promotersCategory:
      type: object
      required:
        - name
        - maxTicketAssigned
        - minPrice
        - maxPrice
        - status
      properties:
        name:
          type: string
        maxTicketAssigned:
          type: string
        minPrice:
          type: string
        maxPrice:
          type: string
        status:
          type: string

    purchaseTicket:
      type: object
      required:
        - eventId
      properties:
        name:
          type: string
        eventId:
          type: string
        email:
          type: string
        promoted_by:
          type: string
        mobile:
          type: string
        payment_received:
          type: string
        payment_mode:
          type: string
        grandTotal:
          type: string
        guestid:
          type: string
        razorpay_payment_id:
          type: string
        payment_type:
          type: string
        tickets:
          type: array
          items:
            type: object
            properties:
              ticket_category:
                type: string
              no_of_ticket:
                type: string
              amount:
                type: string
              grandTotal:
                type: string
              date:
                type: string

    purchaseTicketUpdate:
      type: object
      required:
        - eventId
      properties:
        name:
          type: string
        eventId:
          type: string
        email:
          type: string
        promoted_by:
          type: string
        mobile:
          type: string
        payment_received:
          type: string
        payment_mode:
          type: string
        grandTotal:
          type: string
        tickets:
          type: array
          items:
            type: object
            properties:
              ticket_category:
                type: string
              no_of_ticket:
                type: string
              amount:
                type: string
              grandTotal:
                type: string
              date:
                type: string

    language:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    sorting:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    utils:
      type: object
      required:
        - obj
      properties:
        obj:
          type: object

    subscribe:
      type: object
      required:
        - email
      properties:
        email:
          type: string