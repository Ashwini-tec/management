openapi: 3.0.0
info:
  title: Management Backend
  description: API docs
  version: 1.0.0

servers:
  - url: "http://localhost:9000/api/"

security:
    - authorization: []

tags:
  - name: User
    description: Endpoints to create and get user related data
  - name: Login
    description: Endpoints to login into system

paths:
  /user:
    post:
      tags:
        - User
      summary: Create a data for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          description: OK

    get:
      tags:
        - User
      summary: get all data for user
      responses:
        200:
          description: OK

  /user/{:id}:
    get:
      tags:
        - User
      summary: get by id data for user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - User
      summary: update data for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userUpdate"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - User
      summary: delete user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /login:
    post:
      tags:
        - Login
      summary: Login into system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        200:
          description: Ok

  /guestUser:
    post:
      tags:
        - Guest User
      summary: Create a data for guest user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestUser"
      responses:
        200:
          description: OK

    get:
      tags:
        - Guest User
      summary: get all data for guest user
      responses:
        200:
          description: OK

  /guestUser/{:id}:
    get:
      tags:
        - Guest User
      summary: get by id data for guest user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Guest User
      summary: update data for guest user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestUserUpdate"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Guest User
      summary: delete guest user
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /guestLogin:
    post:
      tags:
        - Guest User Login
      summary: Guest Login into system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/guestLogin"
      responses:
        200:
          description: Ok

  /user/forgot/password:
    post:
      tags:
        - User
      summary: generate forgot password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forgotPassword"
      responses:
        200:
          description: OK

  /user/reset/password:
    post:
      tags:
        - User
      summary: reset password for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPassword"
      responses:
        200:
          description: OK

  /user/otp/verify:
    post:
      tags:
        - User
      summary: otp verify for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/otpVerify"
      responses:
        200:
          description: OK

  /state:
    post:
      tags:
        - State
      summary: Create a data for state
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/state"
      responses:
        200:
          description: OK

    get:
      tags:
        - State
      summary: get all data for state
      responses:
        200:
          description: OK

  /state/{:id}:
    get:
      tags:
        - State
      summary: get by id data for state
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - State
      summary: update data for state
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/state"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - State
      summary: delete state
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /city:
    post:
      tags:
        - City
      summary: Create a data for city
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/city"
      responses:
        200:
          description: OK

    get:
      tags:
        - City
      summary: get all data for city
      responses:
        200:
          description: OK

  /city/{:id}:
    get:
      tags:
        - City
      summary: get by id data for city
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - City
      summary: update data for city
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/city"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - City
      summary: delete city
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /vendorProfile:
    post:
      tags:
        - Vendor Profile
      summary: Create a data for vendorProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vendorProfile"
      responses:
        200:
          description: OK

    get:
      tags:
        - Vendor Profile
      summary: get all data for vendorProfile
      responses:
        200:
          description: OK

  /vendorProfile/{:id}:
    get:
      tags:
        - Vendor Profile
      summary: get by id data for vendorProfile
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Vendor Profile
      summary: update data for vendorProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vendorProfile"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Vendor Profile
      summary: delete vendorProfile
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /category:
    post:
      tags:
        - Category
      summary: Create a data for category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/category"
      responses:
        200:
          description: OK

    get:
      tags:
        - Category
      summary: get all data for category
      responses:
        200:
          description: OK

  /category/{:id}:
    get:
      tags:
        - Category
      summary: get by id data for category
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Category
      summary: update data for category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/category"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Category
      summary: delete category
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /tags:
    post:
      tags:
        - Tags
      summary: Create a data for tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      responses:
        200:
          description: OK

    get:
      tags:
        - Tags
      summary: get all data for tags
      responses:
        200:
          description: OK

  /tags/{:id}:
    get:
      tags:
        - Tags
      summary: get by id data for tags
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Tags
      summary: update data for tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Tags
      summary: delete tags
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

  /partner:
    post:
      tags:
        - Partner
      summary: Create a data for partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partner"
      responses:
        200:
          description: OK

    get:
      tags:
        - Partner
      summary: get all data for partner
      responses:
        200:
          description: OK

  /partner/{:id}:
    get:
      tags:
        - Partner
      summary: get by id data for partner
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    put:
      tags:
        - Partner
      summary: update data for partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partner"
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

    delete:
      tags:
        - Partner
      summary: delete partner
      parameters:
        - in: path
          name: :id
          required: true
      responses:
        200:
          description: OK

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: jwt
  schemas:
    user:
      type: object
      required:
        - firstName
        - email
        - password
        - address
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        address:
          type: string
        mobile:
          type: string
        permissions:
          type: array
          items:
            type: string

    userUpdate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - address
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        address:
          type: string
        mobile:
          type: string
        email:
          type: string
        permissions:
          type: array
          items:
            type: string

    login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    guestUser:
      type: object
      required:
        - email
        - type
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        mobile:
          type: string
        type:
          type: string
        permissions:
          type: array
          items:
            type: string

    guestUserUpdate:
      type: object
      required:
        - email
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        mobile:
          type: string
        permissions:
          type: array
          items:
            type: string

    guestLogin:
      type: object
      required:
        - email
        - password
        - type
      properties:
        email:
          type: string
        password:
          type: string
        type:
          type: string

    forgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string

    resetPassword:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    otpVerify:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
        otp:
          type: string

    state:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    city:
      type: object
      required:
        - name
        - image
      properties:
        name:
          type: string
        image:
          type: string

    vendorProfile:
        type: object
        required:
          - userId
        properties:
          userId:
            type: string
          isGST:
            type: string
          GSTIN:
            type: string
          PAN:
            type: string
          organizationName:
            type: string
          organizationAddress:
            type: string
          state:
            type: string
          contact:
            type: string
          email:
            type: string
          accountType:
            type: string
          beneficiaryName:
            type: string
          accountName:
            type: string
          IFSC:
            type: string
          panImage:
            type: string
          cancelledChequeImage:
            type: string
          agreementSigning:
            type: string

    category:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    tags:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    partner:
      type: object
      required:
        - partner_name
        - partner_img
        - partner_bio
      properties:
        partner_name:
          type: string
        partner_img:
          type: string
        partner_bio:
          type: string